{"version":3,"sources":["serviceWorker.js","actions.js","reducers.js","configureStore.js","components/Selector.js","components/Posts.js","containers/SubredditApp.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","fetchPosts","subreddit","dispatch","type","requestPosts","fetch","then","response","json","posts","data","children","map","child","receivedAt","Date","now","receivePosts","fetchPostsIfNeeded","getState","state","postsBySubreddit","console","log","isFetching","didInvalidate","shouldFetchPosts","items","action","Object","assign","lastUpdated","rootReducer","combineReducers","selectedSubreddit","loggerMiddleware","createLogger","Selector","this","props","value","onChange","options","e","target","option","key","Component","Posts","post","val","author_fullname","title","SubredditApp","handleChange","bind","handleRefreshClick","prevProps","nextSubreddit","preventDefault","toLocaleTimeString","onClick","length","style","opacity","connect","preloadedState","store","createStore","applyMiddleware","thunkMiddleware","App","className","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e44e1173.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import fetch from 'cross-fetch'\r\n\r\nexport const REQUEST_POSTS = 'REQUEST_POSTS'\r\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\r\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\r\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\r\n\r\nexport function selectSubreddit(subreddit) {\r\n  return {\r\n    type: SELECT_SUBREDDIT,\r\n    subreddit\r\n  }\r\n}\r\n\r\nexport function invalidateSubreddit(subreddit) {\r\n  return {\r\n    type: INVALIDATE_SUBREDDIT,\r\n    subreddit\r\n  }\r\n}\r\n\r\nfunction requestPosts(subreddit) {\r\n  return {\r\n    type: REQUEST_POSTS,\r\n    subreddit\r\n  }\r\n}\r\n\r\nfunction receivePosts(subreddit, json) {\r\n  return {\r\n    type: RECEIVE_POSTS,\r\n    subreddit,\r\n    posts: json.data.children.map(child => child.data),\r\n    receivedAt: Date.now()\r\n  }\r\n}\r\n\r\nfunction fetchPosts(subreddit) {\r\n  return dispatch => {\r\n    dispatch(requestPosts(subreddit))\r\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\r\n      .then(response => response.json()\r\n      )\r\n      .then(json => dispatch(receivePosts(subreddit, json)))\r\n      \r\n  }\r\n}\r\n\r\nfunction shouldFetchPosts(state, subreddit) {\r\n  const posts = state.postsBySubreddit[subreddit]\r\n  console.log(\"posts in shouldFetchPosts\", posts);\r\n  if (!posts) {\r\n    return true\r\n  } else if (posts.isFetching) {\r\n    return false\r\n  } else {\r\n    return posts.didInvalidate\r\n  }\r\n}\r\n\r\nexport function fetchPostsIfNeeded(subreddit) {\r\n  return (dispatch, getState) => {\r\n    if (shouldFetchPosts(getState(), subreddit)) {\r\n      return dispatch(fetchPosts(subreddit))\r\n    }\r\n  }\r\n}","import { combineReducers } from 'redux'\r\nimport {\r\n  SELECT_SUBREDDIT,\r\n  INVALIDATE_SUBREDDIT,\r\n  REQUEST_POSTS,\r\n  RECEIVE_POSTS\r\n} from './actions'\r\n\r\nfunction selectedSubreddit(state = 'reactjs', action) {\r\n  switch (action.type) {\r\n    case SELECT_SUBREDDIT:\r\n      return action.subreddit\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction posts(\r\n  state = {\r\n    isFetching: false,\r\n    didInvalidate: false,\r\n    items: []\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case INVALIDATE_SUBREDDIT:\r\n      return Object.assign({}, state, {\r\n        didInvalidate: true\r\n      })\r\n    case REQUEST_POSTS:\r\n      return Object.assign({}, state, {\r\n        isFetching: true,\r\n        didInvalidate: false\r\n      })\r\n    case RECEIVE_POSTS:\r\n      return Object.assign({}, state, {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        items: action.posts,\r\n        lastUpdated: action.receivedAt\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction postsBySubreddit(state = {}, action) {\r\n  switch (action.type) {\r\n    case INVALIDATE_SUBREDDIT:\r\n    case RECEIVE_POSTS:\r\n    case REQUEST_POSTS:\r\n      return Object.assign({}, state, {\r\n        [action.subreddit]: posts(state[action.subreddit], action)\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  postsBySubreddit,\r\n  selectedSubreddit\r\n})\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from './reducers'\r\n\r\nconst loggerMiddleware = createLogger()\r\n\r\nexport const ConfigureStore=(preloadedState) =>{\r\n  return createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n  )\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//Component to select the drop down options - reactjs, frontend, vuejs\r\nexport default class Selector extends Component {\r\n  render() {\r\n    const { value, onChange, options } = this.props\r\n\r\n    return (\r\n      <span>\r\n        <h1>{value}</h1>\r\n        {/* Options being selected using select element */}\r\n        <select onChange={e => onChange(e.target.value)} value={value}>\r\n          {options.map(option => (\r\n            <option value={option} key={option}>\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </span>\r\n    )\r\n  }\r\n}\r\n//Selector props being set using the value selected\r\nSelector.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n} ","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport '../App.css'\r\n\r\n//Retrieve the posts for the subreddit being selected\r\nexport default class Posts extends Component {\r\n  render() {\r\n      return (\r\n        <div>\r\n          {/* Title for the subreddit */}\r\n            <h3>Posts of {this.props.posts[0].subreddit} are as follows</h3>\r\n      <ol>\r\n        {this.props.posts.map((post, val) => (\r\n          //  Display of the name, title of the post\r\n          <li key={val}>{post.author_fullname}:{post.title}</li>\r\n        ))}\r\n      </ol>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nPosts.propTypes = {\r\n  posts: PropTypes.array.isRequired\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  selectSubreddit,\r\n  fetchPostsIfNeeded,\r\n  invalidateSubreddit\r\n} from '../actions'\r\nimport Selector from '../components/Selector'\r\nimport Posts from '../components/Posts'\r\n\r\n//Update the App with selection and posts \r\nclass SubredditApp extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleRefreshClick = this.handleRefreshClick.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { dispatch, selectedSubreddit } = this.props\r\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.selectedSubreddit !== prevProps.selectedSubreddit) {\r\n      const { dispatch, selectedSubreddit } = this.props\r\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n    }\r\n  }\r\n\r\n  handleChange(nextSubreddit) {\r\n    this.props.dispatch(selectSubreddit(nextSubreddit))\r\n    this.props.dispatch(fetchPostsIfNeeded(nextSubreddit))\r\n  }\r\n\r\n  handleRefreshClick(e) {\r\n    e.preventDefault()\r\n\r\n    const { dispatch, selectedSubreddit } = this.props\r\n    dispatch(invalidateSubreddit(selectedSubreddit))\r\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n  }\r\n\r\n  render() {\r\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\r\n    console.log(\"selectedSubreddit\",selectedSubreddit );\r\n    return (\r\n      <div>\r\n        <Selector\r\n          value={selectedSubreddit}\r\n          onChange={this.handleChange}\r\n          options={['reactjs', 'frontend','Vuejs']}\r\n        />\r\n        <p>\r\n          {lastUpdated && (\r\n            <span>\r\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{' '}\r\n            </span>\r\n          )}\r\n          {!isFetching && (\r\n            <button onClick={this.handleRefreshClick}>Refresh</button>\r\n          )}\r\n        </p>\r\n        {isFetching && posts.length === 0 && <h2>Loading...</h2>}\r\n        {!isFetching && posts.length === 0 && <h2>Empty.</h2>}\r\n        {posts.length > 0 && (\r\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\r\n            <Posts posts={posts} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSubredditApp.propTypes = {\r\n  selectedSubreddit: PropTypes.string.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  isFetching: PropTypes.bool.isRequired,\r\n  lastUpdated: PropTypes.number,\r\n  dispatch: PropTypes.func.isRequired\r\n}\r\n\r\n//mapStateToProps renders the new posts based on the state changes\r\nfunction mapStateToProps(state) {\r\n  const { selectedSubreddit, postsBySubreddit } = state\r\n  const { isFetching, lastUpdated, items: posts } = postsBySubreddit[\r\n    selectedSubreddit\r\n  ] || {\r\n    isFetching: true,\r\n    items: []\r\n  }\r\n\r\n  return {\r\n    selectedSubreddit,\r\n    posts,\r\n    isFetching,\r\n    lastUpdated\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(SubredditApp)","import React, { Component } from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport {ConfigureStore} from '../configureStore'\r\nimport SubredditApp from './SubredditApp'\r\n\r\nconst store = ConfigureStore();\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n          <div className=\"App\">\r\n        <SubredditApp/>\r\n        </div>\r\n      </Provider>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n//  import 'babel-polyfill'\n\nimport { render } from 'react-dom'\nimport App from './containers/App'\n\nrender(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}